{"ast":null,"code":"var _jsxFileName = \"/Users/felipelima/Sandbox/udacity/nd0191-c1-myreads/starter/src/BookSearch.js\",\n    _s = $RefreshSig$();\n\n// import { useState } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import * as BooksAPI from \"./BooksAPI\";\n// import ReadStatus from \"./ReadStatus\";\n// const BookSearch = ({ books, setBooks }) => {\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [searchResult, setSearchResult] = useState([]);\n//   const onSearchQueryChange = async (event) => {\n//     const query = event.target.value;\n//     setSearchQuery(query);\n//     if (query.trim() === \"\") {\n//       setSearchResult([]);\n//     }\n//     setSearchQuery(query);\n//     try {\n//       const searchResults = await BooksAPI.search(query, 10);\n//       setSearchResult(searchResults);\n//     } catch (error) {\n//       console.error(\"Error searching books: \", error);\n//       setSearchResult([]);\n//     }\n//   };\n// const handleSearchSubmit = (event) => {\n//   event.preventDefault();\n// };\n// return (\n//   <div>\n//     <div className=\"search-books-bar\">\n//       <div className=\"close-search-page\">\n//         <Link to=\"/\" className=\"close-search\">\n//           close\n//         </Link>\n//       </div>\n//       <div className=\"search-books-input-wrapper\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search by title, author, or ISBN\"\n//           value={searchQuery}\n//           onChange={onSearchQueryChange}\n//         />\n{\n  /* <button onClick={handleSearchSubmit}>Search</button> */\n}\n{\n  /* </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {searchResult.map((book) => (\n              <li key={book.id}>\n                <div className=\"book\">\n                  <div className=\"book-top\">\n                    {<ReadStatus />} */\n}\n{\n  /* <div\n                      className=\"book-cover\"\n                      style={{\n                        width: 128,\n                        height: 193,\n                        backgroundImage: `url(${book.imageLinks.thumbnail})`,\n                      }}\n                    ></div>\n                    <div className=\"book-shelf-changer\">\n                      <select\n                        value={book.shelf}\n                        onChange={(event) => handleShelfChange(event, book)}\n                      >\n                        <option value=\"none\" disabled>\n                          Move to...\n                        </option>\n                        {shelves.map((shelf) => (\n                          <option key={shelf.key} value={shelf.key}>\n                            {shelf.title}\n                          </option>\n                        ))}\n                        <option value=\"none\">None</option>\n                      </select>\n                    </div> */\n}\n{\n  /* </div>\n                </div>\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n  };\n  export default BookSearch; */\n}\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport ReadStatus from \"./ReadStatus\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookSearch = ({\n  books,\n  setBooks\n}) => {\n  _s();\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  useEffect(() => {\n    const fetchSearchResults = async () => {\n      if (searchQuery.trim() === \"\") {\n        setSearchResult([]);\n        return;\n      }\n\n      try {\n        const searchResults = await BooksAPI.search(searchQuery, 10);\n        setSearchResult(searchResults);\n      } catch (error) {\n        console.error(\"Error searching books: \", error);\n        setSearchResult([]);\n      }\n    };\n\n    fetchSearchResults();\n    return () => {// Cleanup function to cancel any ongoing tasks or subscriptions\n      // if the component is unmounted before the search is completed\n      // or if the search query changes.\n    };\n  }, [searchQuery]);\n\n  const onSearchQueryChange = event => {\n    const query = event.target.value;\n    setSearchQuery(query);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-books-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close-search-page\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"close-search\",\n          children: \"close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-input-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Search by title, author, or ISBN\",\n          value: searchQuery,\n          onChange: onSearchQueryChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-books-results\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          className: \"books-grid\",\n          children: searchResult.map(book => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"book\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"book-top\",\n                children: /*#__PURE__*/_jsxDEV(ReadStatus, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 46\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)\n          }, book.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookSearch, \"5zy9za3exPZOOtrDXK0e/RvTDqA=\");\n\n_c = BookSearch;\nexport default BookSearch; // export const BookSearch = () => {\n//   const [input, setInput] = useState(\"\");\n//   const fetchData = (value) => {\n//     fetch(\"https://reactnd-books-api.udacity.com\")\n//       .then((response) => response.json())\n//       .then((json) => {\n//         const results = json.filter((book) => {\n//           return book && book.id && book.title.toLowerCase().includes(value);\n//         });\n//         console.log(results);\n//       });\n//   };\n//   const handleChange = (value) => {\n//     setInput(value);\n//     fetchData(value);\n//   };\n//   return (\n//     <div>\n//       <div className=\"search-books-bar\">\n//         <div className=\"close-search-page\">\n//           <Link to=\"/\" className=\"close-search\">\n//             close\n//           </Link>\n//         </div>\n//         <div className=\"search-books-input-wrapper\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search by title, author, or ISBN\"\n//             value={input}\n//             onChange={(e) => handleChange(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default BookSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookSearch\");","map":{"version":3,"sources":["/Users/felipelima/Sandbox/udacity/nd0191-c1-myreads/starter/src/BookSearch.js"],"names":["useState","useEffect","Link","BooksAPI","ReadStatus","BookSearch","books","setBooks","searchQuery","setSearchQuery","searchResult","setSearchResult","fetchSearchResults","trim","searchResults","search","error","console","onSearchQueryChange","event","query","target","value","map","book","id"],"mappings":"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","sourcesContent":["// import { useState } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import * as BooksAPI from \"./BooksAPI\";\n// import ReadStatus from \"./ReadStatus\";\n\n// const BookSearch = ({ books, setBooks }) => {\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [searchResult, setSearchResult] = useState([]);\n\n//   const onSearchQueryChange = async (event) => {\n//     const query = event.target.value;\n//     setSearchQuery(query);\n\n//     if (query.trim() === \"\") {\n//       setSearchResult([]);\n//     }\n//     setSearchQuery(query);\n\n//     try {\n//       const searchResults = await BooksAPI.search(query, 10);\n//       setSearchResult(searchResults);\n//     } catch (error) {\n//       console.error(\"Error searching books: \", error);\n//       setSearchResult([]);\n//     }\n//   };\n\n// const handleSearchSubmit = (event) => {\n//   event.preventDefault();\n// };\n\n// return (\n//   <div>\n//     <div className=\"search-books-bar\">\n//       <div className=\"close-search-page\">\n//         <Link to=\"/\" className=\"close-search\">\n//           close\n//         </Link>\n//       </div>\n//       <div className=\"search-books-input-wrapper\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search by title, author, or ISBN\"\n//           value={searchQuery}\n//           onChange={onSearchQueryChange}\n//         />\n{\n  /* <button onClick={handleSearchSubmit}>Search</button> */\n}\n{\n  /* </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {searchResult.map((book) => (\n              <li key={book.id}>\n                <div className=\"book\">\n                  <div className=\"book-top\">\n                    {<ReadStatus />} */\n}\n{\n  /* <div\n                      className=\"book-cover\"\n                      style={{\n                        width: 128,\n                        height: 193,\n                        backgroundImage: `url(${book.imageLinks.thumbnail})`,\n                      }}\n                    ></div>\n                    <div className=\"book-shelf-changer\">\n                      <select\n                        value={book.shelf}\n                        onChange={(event) => handleShelfChange(event, book)}\n                      >\n                        <option value=\"none\" disabled>\n                          Move to...\n                        </option>\n                        {shelves.map((shelf) => (\n                          <option key={shelf.key} value={shelf.key}>\n                            {shelf.title}\n                          </option>\n                        ))}\n                        <option value=\"none\">None</option>\n                      </select>\n                    </div> */\n}\n{\n  /* </div>\n                </div>\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookSearch; */\n}\n\nimport { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport ReadStatus from \"./ReadStatus\";\n\nconst BookSearch = ({ books, setBooks }) => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n\n  useEffect(() => {\n    const fetchSearchResults = async () => {\n      if (searchQuery.trim() === \"\") {\n        setSearchResult([]);\n        return;\n      }\n\n      try {\n        const searchResults = await BooksAPI.search(searchQuery, 10);\n        setSearchResult(searchResults);\n      } catch (error) {\n        console.error(\"Error searching books: \", error);\n        setSearchResult([]);\n      }\n    };\n\n    fetchSearchResults();\n\n    return () => {\n      // Cleanup function to cancel any ongoing tasks or subscriptions\n      // if the component is unmounted before the search is completed\n      // or if the search query changes.\n    };\n  }, [searchQuery]);\n\n  const onSearchQueryChange = (event) => {\n    const query = event.target.value;\n    setSearchQuery(query);\n  };\n\n  return (\n    <div>\n      <div className=\"search-books-bar\">\n        <div className=\"close-search-page\">\n          <Link to=\"/\" className=\"close-search\">\n            close\n          </Link>\n        </div>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title, author, or ISBN\"\n            value={searchQuery}\n            onChange={onSearchQueryChange}\n          />\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">\n            {searchResult.map((book) => (\n              <li key={book.id}>\n                <div className=\"book\">\n                  <div className=\"book-top\">{<ReadStatus />}</div>\n                </div>\n              </li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BookSearch;\n// export const BookSearch = () => {\n//   const [input, setInput] = useState(\"\");\n\n//   const fetchData = (value) => {\n//     fetch(\"https://reactnd-books-api.udacity.com\")\n//       .then((response) => response.json())\n//       .then((json) => {\n//         const results = json.filter((book) => {\n//           return book && book.id && book.title.toLowerCase().includes(value);\n//         });\n//         console.log(results);\n//       });\n//   };\n//   const handleChange = (value) => {\n//     setInput(value);\n//     fetchData(value);\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"search-books-bar\">\n//         <div className=\"close-search-page\">\n//           <Link to=\"/\" className=\"close-search\">\n//             close\n//           </Link>\n//         </div>\n//         <div className=\"search-books-input-wrapper\">\n//           <input\n//             type=\"text\"\n//             placeholder=\"Search by title, author, or ISBN\"\n//             value={input}\n//             onChange={(e) => handleChange(e.target.value)}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n// export default BookSearch;\n"]},"metadata":{},"sourceType":"module"}